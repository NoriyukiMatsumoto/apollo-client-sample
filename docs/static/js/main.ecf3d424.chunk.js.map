{"version":3,"sources":["generated/graphql.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SortOrderEnum","OperatorKindEnum","CacheControlScope","PostsDocument","gql","App","baseOptions","variables","options","paginate","page","limit","fetchPolicy","ApolloReactHooks","postsData","data","postsLoading","loading","postsError","error","postsRefetch","refetch","PageButton","Button","onClick","handlePageClick","Container","Row","Col","Table","striped","bordered","hover","posts","map","postData","key","id","title","ButtonGroup","Modal","show","Body","className","role","message","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ecf3d424.chunk.js","sourcesContent":["import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  _?: Maybe<Scalars['Int']>;\n  albums?: Maybe<AlbumsPage>;\n  album?: Maybe<Album>;\n  comments?: Maybe<CommentsPage>;\n  comment?: Maybe<Comment>;\n  photos?: Maybe<PhotosPage>;\n  photo?: Maybe<Photo>;\n  posts?: Maybe<PostsPage>;\n  post?: Maybe<Post>;\n  todos?: Maybe<TodosPage>;\n  todo?: Maybe<Todo>;\n  users?: Maybe<UsersPage>;\n  user?: Maybe<User>;\n};\n\n\nexport type QueryAlbumsArgs = {\n  options?: Maybe<PageQueryOptions>;\n};\n\n\nexport type QueryAlbumArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryCommentsArgs = {\n  options?: Maybe<PageQueryOptions>;\n};\n\n\nexport type QueryCommentArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryPhotosArgs = {\n  options?: Maybe<PageQueryOptions>;\n};\n\n\nexport type QueryPhotoArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryPostsArgs = {\n  options?: Maybe<PageQueryOptions>;\n};\n\n\nexport type QueryPostArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryTodosArgs = {\n  options?: Maybe<PageQueryOptions>;\n};\n\n\nexport type QueryTodoArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryUsersArgs = {\n  options?: Maybe<PageQueryOptions>;\n};\n\n\nexport type QueryUserArgs = {\n  id: Scalars['ID'];\n};\n\nexport type PageQueryOptions = {\n  paginate?: Maybe<PaginateOptions>;\n  slice?: Maybe<SliceOptions>;\n  sort?: Maybe<Array<Maybe<SortOptions>>>;\n  operators?: Maybe<Array<Maybe<OperatorOptions>>>;\n  search?: Maybe<SearchOptions>;\n};\n\nexport type PaginateOptions = {\n  page?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n};\n\nexport type SliceOptions = {\n  start?: Maybe<Scalars['Int']>;\n  end?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n};\n\nexport type SortOptions = {\n  field?: Maybe<Scalars['String']>;\n  order?: Maybe<SortOrderEnum>;\n};\n\nexport enum SortOrderEnum {\n  Asc = 'ASC',\n  Desc = 'DESC'\n}\n\nexport type OperatorOptions = {\n  kind?: Maybe<OperatorKindEnum>;\n  field?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n};\n\nexport enum OperatorKindEnum {\n  Gte = 'GTE',\n  Lte = 'LTE',\n  Ne = 'NE',\n  Like = 'LIKE'\n}\n\nexport type SearchOptions = {\n  q?: Maybe<Scalars['String']>;\n};\n\nexport type AlbumsPage = {\n  __typename?: 'AlbumsPage';\n  data?: Maybe<Array<Maybe<Album>>>;\n  links?: Maybe<PaginationLinks>;\n  meta?: Maybe<PageMetadata>;\n};\n\nexport type Album = {\n  __typename?: 'Album';\n  id?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n  user?: Maybe<User>;\n  photos?: Maybe<PhotosPage>;\n};\n\n\nexport type AlbumPhotosArgs = {\n  options?: Maybe<PageQueryOptions>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  id?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n  username?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  address?: Maybe<Address>;\n  phone?: Maybe<Scalars['String']>;\n  website?: Maybe<Scalars['String']>;\n  company?: Maybe<Company>;\n  posts?: Maybe<PostsPage>;\n  albums?: Maybe<AlbumsPage>;\n  todos?: Maybe<TodosPage>;\n};\n\n\nexport type UserPostsArgs = {\n  options?: Maybe<PageQueryOptions>;\n};\n\n\nexport type UserAlbumsArgs = {\n  options?: Maybe<PageQueryOptions>;\n};\n\n\nexport type UserTodosArgs = {\n  options?: Maybe<PageQueryOptions>;\n};\n\nexport type Address = {\n  __typename?: 'Address';\n  street?: Maybe<Scalars['String']>;\n  suite?: Maybe<Scalars['String']>;\n  city?: Maybe<Scalars['String']>;\n  zipcode?: Maybe<Scalars['String']>;\n  geo?: Maybe<Geo>;\n};\n\nexport type Geo = {\n  __typename?: 'Geo';\n  lat?: Maybe<Scalars['Float']>;\n  lng?: Maybe<Scalars['Float']>;\n};\n\nexport type Company = {\n  __typename?: 'Company';\n  name?: Maybe<Scalars['String']>;\n  catchPhrase?: Maybe<Scalars['String']>;\n  bs?: Maybe<Scalars['String']>;\n};\n\nexport type PostsPage = {\n  __typename?: 'PostsPage';\n  data?: Maybe<Array<Maybe<Post>>>;\n  links?: Maybe<PaginationLinks>;\n  meta?: Maybe<PageMetadata>;\n};\n\nexport type Post = {\n  __typename?: 'Post';\n  id?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n  body?: Maybe<Scalars['String']>;\n  user?: Maybe<User>;\n  comments?: Maybe<CommentsPage>;\n};\n\n\nexport type PostCommentsArgs = {\n  options?: Maybe<PageQueryOptions>;\n};\n\nexport type CommentsPage = {\n  __typename?: 'CommentsPage';\n  data?: Maybe<Array<Maybe<Comment>>>;\n  links?: Maybe<PaginationLinks>;\n  meta?: Maybe<PageMetadata>;\n};\n\nexport type Comment = {\n  __typename?: 'Comment';\n  id?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  body?: Maybe<Scalars['String']>;\n  post?: Maybe<Post>;\n};\n\nexport type PaginationLinks = {\n  __typename?: 'PaginationLinks';\n  first?: Maybe<PageLimitPair>;\n  prev?: Maybe<PageLimitPair>;\n  next?: Maybe<PageLimitPair>;\n  last?: Maybe<PageLimitPair>;\n};\n\nexport type PageLimitPair = {\n  __typename?: 'PageLimitPair';\n  page?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n};\n\nexport type PageMetadata = {\n  __typename?: 'PageMetadata';\n  totalCount?: Maybe<Scalars['Int']>;\n};\n\nexport type TodosPage = {\n  __typename?: 'TodosPage';\n  data?: Maybe<Array<Maybe<Todo>>>;\n  links?: Maybe<PaginationLinks>;\n  meta?: Maybe<PageMetadata>;\n};\n\nexport type Todo = {\n  __typename?: 'Todo';\n  id?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n  completed?: Maybe<Scalars['Boolean']>;\n  user?: Maybe<User>;\n};\n\nexport type PhotosPage = {\n  __typename?: 'PhotosPage';\n  data?: Maybe<Array<Maybe<Photo>>>;\n  links?: Maybe<PaginationLinks>;\n  meta?: Maybe<PageMetadata>;\n};\n\nexport type Photo = {\n  __typename?: 'Photo';\n  id?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n  url?: Maybe<Scalars['String']>;\n  thumbnailUrl?: Maybe<Scalars['String']>;\n  album?: Maybe<Album>;\n};\n\nexport type UsersPage = {\n  __typename?: 'UsersPage';\n  data?: Maybe<Array<Maybe<User>>>;\n  links?: Maybe<PaginationLinks>;\n  meta?: Maybe<PageMetadata>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  _?: Maybe<Scalars['Int']>;\n  createAlbum?: Maybe<Album>;\n  updateAlbum?: Maybe<Album>;\n  deleteAlbum?: Maybe<Scalars['Boolean']>;\n  createComment?: Maybe<Comment>;\n  updateComment?: Maybe<Comment>;\n  deleteComment?: Maybe<Scalars['Boolean']>;\n  createPhoto?: Maybe<Photo>;\n  updatePhoto?: Maybe<Photo>;\n  deletePhoto?: Maybe<Scalars['Boolean']>;\n  createPost?: Maybe<Post>;\n  updatePost?: Maybe<Post>;\n  deletePost?: Maybe<Scalars['Boolean']>;\n  createTodo?: Maybe<Todo>;\n  updateTodo?: Maybe<Todo>;\n  deleteTodo?: Maybe<Scalars['Boolean']>;\n  createUser?: Maybe<User>;\n  updateUser?: Maybe<User>;\n  deleteUser?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type MutationCreateAlbumArgs = {\n  input: CreateAlbumInput;\n};\n\n\nexport type MutationUpdateAlbumArgs = {\n  id: Scalars['ID'];\n  input: UpdateAlbumInput;\n};\n\n\nexport type MutationDeleteAlbumArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationCreateCommentArgs = {\n  input: CreateCommentInput;\n};\n\n\nexport type MutationUpdateCommentArgs = {\n  id: Scalars['ID'];\n  input: UpdateCommentInput;\n};\n\n\nexport type MutationDeleteCommentArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationCreatePhotoArgs = {\n  input: CreatePhotoInput;\n};\n\n\nexport type MutationUpdatePhotoArgs = {\n  id: Scalars['ID'];\n  input: UpdatePhotoInput;\n};\n\n\nexport type MutationDeletePhotoArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationCreatePostArgs = {\n  input: CreatePostInput;\n};\n\n\nexport type MutationUpdatePostArgs = {\n  id: Scalars['ID'];\n  input: UpdatePostInput;\n};\n\n\nexport type MutationDeletePostArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationCreateTodoArgs = {\n  input: CreateTodoInput;\n};\n\n\nexport type MutationUpdateTodoArgs = {\n  id: Scalars['ID'];\n  input: UpdateTodoInput;\n};\n\n\nexport type MutationDeleteTodoArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationCreateUserArgs = {\n  input: CreateUserInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  id: Scalars['ID'];\n  input: UpdateUserInput;\n};\n\n\nexport type MutationDeleteUserArgs = {\n  id: Scalars['ID'];\n};\n\nexport type CreateAlbumInput = {\n  title: Scalars['String'];\n  userId: Scalars['ID'];\n};\n\nexport type UpdateAlbumInput = {\n  title?: Maybe<Scalars['String']>;\n  userId?: Maybe<Scalars['ID']>;\n};\n\nexport type CreateCommentInput = {\n  name: Scalars['String'];\n  email: Scalars['String'];\n  body: Scalars['String'];\n};\n\nexport type UpdateCommentInput = {\n  name?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  body?: Maybe<Scalars['String']>;\n};\n\nexport type CreatePhotoInput = {\n  title: Scalars['String'];\n  url: Scalars['String'];\n  thumbnailUrl: Scalars['String'];\n};\n\nexport type UpdatePhotoInput = {\n  title?: Maybe<Scalars['String']>;\n  url?: Maybe<Scalars['String']>;\n  thumbnailUrl?: Maybe<Scalars['String']>;\n};\n\nexport type CreatePostInput = {\n  title: Scalars['String'];\n  body: Scalars['String'];\n};\n\nexport type UpdatePostInput = {\n  title?: Maybe<Scalars['String']>;\n  body?: Maybe<Scalars['String']>;\n};\n\nexport type CreateTodoInput = {\n  title: Scalars['String'];\n  completed: Scalars['Boolean'];\n};\n\nexport type UpdateTodoInput = {\n  title?: Maybe<Scalars['String']>;\n  completed?: Maybe<Scalars['Boolean']>;\n};\n\nexport type CreateUserInput = {\n  name: Scalars['String'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n  address?: Maybe<AddressInput>;\n  phone?: Maybe<Scalars['String']>;\n  website?: Maybe<Scalars['String']>;\n  company?: Maybe<CompanyInput>;\n};\n\nexport type AddressInput = {\n  street?: Maybe<Scalars['String']>;\n  suite?: Maybe<Scalars['String']>;\n  city?: Maybe<Scalars['String']>;\n  zipcode?: Maybe<Scalars['String']>;\n  geo?: Maybe<GeoInput>;\n};\n\nexport type GeoInput = {\n  lat?: Maybe<Scalars['Float']>;\n  lng?: Maybe<Scalars['Float']>;\n};\n\nexport type CompanyInput = {\n  name?: Maybe<Scalars['String']>;\n  catchPhrase?: Maybe<Scalars['String']>;\n  bs?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateUserInput = {\n  name?: Maybe<Scalars['String']>;\n  username?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  address?: Maybe<AddressInput>;\n  phone?: Maybe<Scalars['String']>;\n  website?: Maybe<Scalars['String']>;\n  company?: Maybe<CompanyInput>;\n};\n\nexport enum CacheControlScope {\n  Public = 'PUBLIC',\n  Private = 'PRIVATE'\n}\n\n\nexport type PostsQueryVariables = Exact<{\n  options?: Maybe<PageQueryOptions>;\n}>;\n\n\nexport type PostsQuery = (\n  { __typename?: 'Query' }\n  & { posts?: Maybe<(\n    { __typename?: 'PostsPage' }\n    & { data?: Maybe<Array<Maybe<(\n      { __typename?: 'Post' }\n      & Pick<Post, 'id' | 'title'>\n    )>>>, meta?: Maybe<(\n      { __typename?: 'PageMetadata' }\n      & Pick<PageMetadata, 'totalCount'>\n    )> }\n  )> }\n);\n\n\nexport const PostsDocument = gql`\n    query posts($options: PageQueryOptions) {\n  posts(options: $options) {\n    data {\n      id\n      title\n    }\n    meta {\n      totalCount\n    }\n  }\n}\n    `;\nexport type PostsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<PostsQuery, PostsQueryVariables>, 'query'>;\n\n    export const PostsComponent = (props: PostsComponentProps) => (\n      <ApolloReactComponents.Query<PostsQuery, PostsQueryVariables> query={PostsDocument} {...props} />\n    );\n    \n\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function usePostsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PostsQuery, PostsQueryVariables>) {\n        return ApolloReactHooks.useQuery<PostsQuery, PostsQueryVariables>(PostsDocument, baseOptions);\n      }\nexport function usePostsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PostsQuery, PostsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<PostsQuery, PostsQueryVariables>(PostsDocument, baseOptions);\n        }\nexport type PostsQueryHookResult = ReturnType<typeof usePostsQuery>;\nexport type PostsLazyQueryHookResult = ReturnType<typeof usePostsLazyQuery>;\nexport type PostsQueryResult = ApolloReactCommon.QueryResult<PostsQuery, PostsQueryVariables>;","import React from 'react';\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\"\nimport Table from \"react-bootstrap/Table\"\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\"\n\nimport {\n  usePostsQuery\n} from './generated/graphql'\n\n\nconst App = () => {\n\n  const {\n    data: postsData,\n    loading: postsLoading,\n    error: postsError,\n    refetch: postsRefetch,\n  } = usePostsQuery({\n    variables: {\n      options: {\n        paginate: {\n          page: 1,\n          limit: 5,\n        },\n      },\n    },\n    fetchPolicy: \"cache-and-network\",\n  });\n  \n  \n\n  const PageButton = (page: number) => {\n    const handlePageClick = (page: number) => {\n      postsRefetch({\n        options: {\n          paginate: {\n            page,\n            limit: 5,\n          },\n        },\n      });\n    };\n    return (\n      <Button\n        onClick={() => {\n          handlePageClick(page);\n        }}\n      >{ page }ページ目を表示</Button>\n    );\n  }\n\n  return (\n    <>\n      <Container>\n        <Row>\n          <Col>\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th>ID</th>\n                  <th>タイトル</th>\n                </tr>\n              </thead>\n              <tbody>\n                {postsData?.posts?.data?.map((postData) => {\n                  return (\n                    <tr key={postData?.id}>\n                      <td>{postData?.id}</td>\n                      <td>{postData?.title}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </Table>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <ButtonGroup>\n              {PageButton(1)}\n              {PageButton(2)}\n              {PageButton(3)}\n            </ButtonGroup>\n          </Col>\n        </Row>\n      </Container>\n      <Modal show={postsLoading}>\n        <Modal.Body>\n          <div className=\"d-flex justify-content-center\">\n            <div className=\"spinner-border\" role=\"status\">\n              <span className=\"sr-only\">Loading...</span>\n            </div>\n          </div>\n        </Modal.Body>\n      </Modal>\n      <Modal show={!!postsError}>\n        <Modal.Body>{postsError?.message}</Modal.Body>\n      </Modal>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst client = new ApolloClient({\n  uri: \"https://graphqlzero.almansi.me/api\",\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}